---
- name: 'Install required packages'
  package:
    state: 'present'
    name:
      - 'python3'
      - 'libapache2-mod-wsgi-py3'
      - 'python3-pip'
      - 'python3-psycopg2'
      - 'python-psycopg2'
      - 'python-virtualenv'

- name: 'Clone repository'
  import_tasks: clone_repository.yml

# Todo: fix issue: this fails silently on error
- name: 'Create role and database'
  command:
    cmd: psql -v ON_ERROR_STOP=0 --no-password
    stdin: |
      CREATE USER {{ database_user_pgweb }} WITH PASSWORD '{{ database_password }}';
      CREATE DATABASE {{ database_name_pgweb }};
  become: true
  become_user: 'postgres'
  register: result
  failed_when: 'result.rc != 0 and not "already exists" in result.stderr'

- name: 'Include http_vhost role'
  include_role:
    name: 'http_vhost'
  vars:
    service_vhost_extra: true
    vhost_extra: '{{ vhost_extra_pgweb }}'

- name: 'Activate mod_wsgi on apache2'
  community.general.apache2_module:
    name: wsgi
    state: present
  notify: 'Reload httpd'

- name: 'Install virtualenv via pip'
  pip:
    name: virtualenv
    executable: pip3
  become: true

- name: 'Fix pycopg bug by installing -binary version'
  lineinfile:
    path: '{{ service_base_path }}/requirements.txt'
    regexp: '^psycopg2=='
    line: 'psycopg2-binary'

- name: 'Fix pycryptodomex bug by removing version condition'
  lineinfile:
    path: '{{ service_base_path }}/requirements.txt'
    regexp: '^pycryptodomex'
    line: 'pycryptodomex'

- name: 'Install required packages for django using pip'
  pip:
    requirements: '{{ service_base_path }}/requirements.txt'
    virtualenv: '{{ service_base_path }}/'
    virtualenv_python: python3
  become: true

- name: 'Include Django role'
  include_role:
    name: cchurch.django
  vars:
    django_app_path: '{{ service_base_path }}'
    django_user: list
    django_virtualenv: '{{ service_base_path }}'

# Todo: it will be better to run this inside the venv
- name: 'Run varnish_local.sql to disable Varnish functions'
  community.postgresql.postgresql_script:
    db: '{{ database_name_pgweb }}'
    path: '{{ service_base_path }}/sql/varnish_local.sql'
  become: true
  become_user: 'postgres'

# To run this manually, simply run
# python manage.py createsuperuser
# into pgweb's virtualenv.
- name: 'Create django superuser'
  command:
    chdir: '{{ service_base_path }}'
    cmd: '{{ venv_python }} {{ service_base_path }}/manage.py shell'
    stdin: |
      from django.contrib.auth import get_user_model
      User = get_user_model()
      if not User.objects.filter(username='admin').exists():
        user = User.objects.create_superuser('admin', '{{ django_superuser_address }}', '{{ django_superuser_pass }}')
        user.first_name = "Admin"
        user.last_name = "Admin"
        user.save()
        print("changed")
  register: res
  changed_when: res.stdout == "changed"
  become: true
  become_user: 'list'

- name: 'Drop make-dyncss.sh'
  template:
    src: 'make_dyncss.sh.j2'
    dest: '{{ service_base_path }}/make_dyncss.sh'
    owner: 'list'
    group: 'www-data'
    mode: '660'

- name: 'Run make_dyncss.sh'
  command: sh '{{ service_base_path }}/make_dyncss.sh'

- name: 'Add crontab to emit emails'
  cron:
    state: 'present'
    name: 'Send emails'
    user: 'list'
    minute: '*/5'
    hour: '*'
    job: '{{ venv_python }} {{ service_base_path }}/manage.py send_queued_mail'

- name: 'Verify if a pgauth_key already exists'
  command:
    chdir: '{{ service_base_path }}'
    cmd: '{{ venv_python }} {{ service_base_path }}/manage.py shell'
    stdin: |
      from pgweb.account.models import *
      authsites = CommunityAuthSite.objects.all();
      if len(authsites) > 0:
        pgauth_key = authsites[0].cryptkey
        print(pgauth_key)
      else:
        print("No key found")
  become: true
  become_user: 'list'
  register: key
  changed_when: false

- name: 'Generate new cryptkey to link pgweb and pglister'
  shell: |
    set -o pipefail
    {{ venv_python }} {{ service_base_path }}/tools/communityauth/generate_cryptkey.py | tail -n 1
  become: true
  become_user: 'list'
  register: 'pgauth_key_stdout'
  changed_when: true
  when: pgauth_key is not defined or pgauth_key == '' or pgauth_key != key.stdout

- name: 'Display generated pgauth_key'
  debug:
    var: pgauth_key_stdout.stdout
  when: pgauth_key_stdout.stdout is defined

- name: 'Save result to pgauth_key variable'
  set_fact:
    pgauth_key: '{{ pgauth_key_stdout.stdout }}'
  when: pgauth_key is not defined

# To do this manually, add a community auth org and site in /admin/
- name: 'Create community auth site to link pgweb and pglister'
  command:
    chdir: '{{ service_base_path }}'
    cmd: '{{ venv_python }} {{ service_base_path }}/manage.py shell'
    stdin: |
      from pgweb.account.models import *
      if len(CommunityAuthOrg.objects.filter(orgname="pglister")) == 0:
        Org = CommunityAuthOrg()
        Org.orgname = "pglister"
        Org.save()

        if len(CommunityAuthSite.objects.filter(name="pglister")) == 0:
          Site = CommunityAuthSite()
          Site.id = 1
          Site.name = "pglister"
          Site.redirecturl = "https://{{ service_vhost_name_pglister }}/auth_receive/"
          Site.apiurl = "https://{{ service_vhost_name_pgweb }}/account/auth/1/"
          Site.cryptkey = "{{ pgauth_key }}"
          Site.org = Org
          Site.push_changes = True
          Site.save()

        print("changed")
  register: res
  changed_when: res.stdout == "changed"
  become: true
  become_user: 'list'

- name: 'Create community auth site to link pgweb and pgarchives_private'
  command:
    chdir: '{{ service_base_path }}'
    cmd: '{{ venv_python }} {{ service_base_path }}/manage.py shell'
    stdin: |
      from pgweb.account.models import *
      if len(CommunityAuthOrg.objects.filter(orgname="pgarchives_private")) == 0:
        Org = CommunityAuthOrg()
        Org.orgname = "pgarchives_private"
        Org.save()

        if len(CommunityAuthSite.objects.filter(name="pgarchives_private")) == 0:
          Site = CommunityAuthSite()
          Site.id = 2
          Site.name = "pgarchives_private"
          Site.redirecturl = "https://{{ service_vhost_name_pgarchives_private }}/auth_receive/"
          Site.apiurl = "https://{{ service_vhost_name_pgweb }}/account/auth/2/"
          Site.cryptkey = "{{ pgauth_key }}"
          Site.org = Org
          Site.push_changes = True
          Site.save()

        print("changed")
  register: res
  changed_when: res.stdout == "changed"
  become: true
  become_user: 'list'

- name: 'Ensure cryptkeys of all existing authsites match pgauth_key (for idempotence)'
  command:
    chdir: '{{ service_base_path }}'
    cmd: '{{ venv_python }} {{ service_base_path }}/manage.py shell'
    stdin: |
      from pgweb.account.models import *
      authsites = CommunityAuthSite.objects.all()
      for site in authsites:
        if site.cryptkey != "{{ pgauth_key }}":
          site.cryptkey = "{{ pgauth_key }}";
          print("changed")
  register: res
  changed_when: '"changed" in res.stdout'
  become: true
  become_user: 'list'
