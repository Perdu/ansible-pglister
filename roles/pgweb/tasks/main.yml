---
- name: 'Install required packages'
  package:
    state: 'latest'
    name:
      - 'python3'
      - 'libapache2-mod-wsgi-py3'
      - 'python3-pip'
      - 'python3-psycopg2'
      - 'python-psycopg2'
      - 'python-virtualenv'

- name: 'Create folder tree'
  file:
    path: '{{ service_base_path }}'
    state: 'directory'
    owner: 'list'
    group: 'www-data'
    mode: 0755

- name: 'Clone pgweb repository'
  git:
    repo: '{{ repo_uri }}'
    dest: '{{ base_path }}/{{ repo_name }}'
    clone: true
    update: true
    version: '{{ pgweb_version }}'
  register: repo

- name: 'Copy repository content to local folder'
  command:
    cmd: sh -c 'cp -r {{ base_path }}/{{ repo_name }}/* {{ service_base_path }}/'

- name: 'chown list:www-data pgweb directory'
  file:
    path: '{{ service_base_path }}'
    owner: 'list'
    group: 'www-data'
    recurse: 'yes'

- name: 'override contexts.py to disable non-account-related links'
  template:
    src: 'contexts.py.j2'
    dest: '{{ service_base_path }}/pgweb/util/contexts.py'
    owner: 'list'
    group: 'www-data'
    mode: '0644'

- name: 'override base.html to disable non-account-related links'
  copy:
    src: 'base.html'
    dest: '{{ service_base_path }}/templates/base/base.html'
    owner: 'list'
    group: 'www-data'
    mode: '0644'

- name: 'override index.html to remove non-account-related information'
  copy:
    src: 'index.html'
    dest: '{{ service_base_path }}/templates/account/index.html'
    owner: 'list'
    group: 'www-data'
    mode: '0644'

# Todo: fix issue: this fails silently on error
- name: 'Create role and database'
  command:
    cmd: psql -v ON_ERROR_STOP=0 --no-password
    stdin: |
      CREATE USER {{ database_user_pgweb }} WITH PASSWORD '{{ database_password }}';
      CREATE DATABASE {{ database_name_pgweb }};
  become: true
  become_user: 'postgres'
  register: result
  failed_when: 'result.rc != 0 and not "already exists" in result.stderr'

- include_role:
    name: 'http_vhost'
  vars:
    service_vhost_extra: true

- name: 'Activate mod_wsgi on apache2'
  command: '/usr/sbin/a2enmod wsgi'
  notify: 'reload httpd'

- name: 'Drop settings.py for django'
  template:
    src: 'settings.py.j2'
    dest: '{{ web_path }}/settings_local.py'
    owner: 'list'
    group: 'www-data'
    mode: '0660'

- name: 'Give correct permissions to /var/list for logging'
  file:
    path: '/var/list'
    owner: 'list'
    group: 'www-data'
    state: 'directory'

- name: 'install virtualenv via pip'
  pip:
    name: virtualenv
    executable: pip3
  become: true

- name: 'fix pycopg bug by installing -binary version'
  lineinfile:
    path: '{{ service_base_path }}/requirements.txt'
    regexp: '^psycopg2=='
    line: 'psycopg2-binary'

- name: 'fix pycryptodomex bug by removing version condition'
  lineinfile:
    path: '{{ service_base_path }}/requirements.txt'
    regexp: '^pycryptodomex'
    line: 'pycryptodomex'

- name: 'install required packages for django using pip'
  pip:
    requirements: '{{ service_base_path }}/requirements.txt'
    virtualenv: '{{ service_base_path }}/'
    virtualenv_python: python3
  become: true

- name: 'Create /var/list'
  file:
    path: '/var/list'
    state: 'directory'

- include_role:
    name: cchurch.django
  vars:
    django_app_path: '{{ service_base_path }}'
    django_user: list
    django_virtualenv: '{{ service_base_path }}'

# Todo: it will be better to run this inside the venv
- name: 'Run varnish_local.sql to disable Varnish functions'
  postgresql_query:
    db: '{{ database_name_pgweb }}'
    path_to_script: '{{ service_base_path }}/sql/varnish_local.sql'
    as_single_query: false
  become: true
  become_user: 'postgres'

# To run this manually, simply run
# python manage.py createsuperuser
# into pgweb's virtualenv.
- name: 'Create django superuser'
  command:
    cmd: 'sh -c "cd {{ service_base_path }} && {{ venv_python }} {{ service_base_path }}/manage.py shell"'
    stdin: |
      from django.contrib.auth import get_user_model
      User = get_user_model()
      if not User.objects.filter(username='admin').exists():
        user = User.objects.create_superuser('admin', '{{ django_superuser_address }}', '{{ django_superuser_pass }}')
        user.first_name = "Admin"
        user.last_name = "Admin"
        user.save()
  become: true
  become_user: 'list'

- name: 'Drop make-dyncss.sh'
  template:
    src: 'make_dyncss.sh.j2'
    dest: '{{ service_base_path }}/make_dyncss.sh'
    owner: 'list'
    group: 'www-data'
    mode: '0660'

- name: 'Run make_dyncss.sh'
  command: sh '{{ service_base_path }}/make_dyncss.sh'

- name: 'Add crontab to emit emails'
  cron:
    state: 'present'
    name: 'Send emails'
    user: 'list'
    minute: '*/5'
    hour: '*'
    job: '{{ venv_python }} {{ service_base_path }}/manage.py send_queued_mail'

- name: 'Generate cryptkey to link pgweb and pglister'
  command:
    cmd: "sh -c '{{ venv_python }} {{ service_base_path }}/tools/communityauth/generate_cryptkey.py | tail -n 1'"
  become: true
  become_user: 'list'
  register: 'pgauth_key_stdout'
  when: pgauth_key is not defined

- set_fact:
    pgauth_key={{ pgauth_key_stdout.stdout }}
  when: pgauth_key is not defined

# To do this manually, add a community auth org and site in /admin/
- name: 'Create community auth site to link pgweb and pglister'
  command:
    cmd: 'sh -c "cd {{ service_base_path }} && {{ venv_python }} {{ service_base_path }}/manage.py shell"'
    stdin: |
      from pgweb.account.models import *
      if len(CommunityAuthOrg.objects.filter(orgname="pglister")) == 0:
        Org = CommunityAuthOrg()
        Org.orgname = "pglister"
        Org.save()

        if len(CommunityAuthSite.objects.filter(name="pglister")) == 0:
          Site = CommunityAuthSite()
          Site.id = 1
          Site.name = "pglister"
          Site.redirecturl = "https://{{ service_vhost_name_pglister }}/auth_receive/"
          Site.apiurl = "https://{{ service_vhost_name_pgweb }}/account/auth/1/"
          Site.cryptkey = "{{ pgauth_key }}"
          Site.org = Org
          Site.push_changes = True
          Site.save()
  become: true
  become_user: 'list'

## Search
- name: 'Create search database'
  command:
    cmd: psql -v ON_ERROR_STOP=0 --no-password
    stdin: |
      CREATE DATABASE {{ database_search }};
  become: true
  become_user: 'postgres'
  register: result
  failed_when: 'result.rc != 0 and not "already exists" in result.stderr'

- name: 'Grant permissions to search database to Debian-exim'
  postgresql_query:
    query: '{{ item }}'
    db: '{{ database_search }}'
  loop:
    - 'GRANT ALL ON DATABASE {{ database_search }} TO "Debian-exim";'
    - 'GRANT ALL ON ALL TABLES IN SCHEMA public TO "Debian-exim";'
    - 'GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO "Debian-exim";'
  become: true
  become_user: 'postgres'

- name: 'Execute sql scripts to create search database'
  command:
    cmd: sh -c 'psql {{ database_search }} < {{ service_base_path }}/tools/search/sql/{{ item }}'
  loop:
    - 'schema.sql'
    - 'tsearch.sql'
    - 'functions.sql'
    - 'data.sql'
    - 'indexes.sql'
  become: true
  become_user: 'list'
