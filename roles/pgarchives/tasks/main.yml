---
- name: 'Install required packages'
  package:
    state: 'latest'
    name:
      - 'python3'
      - 'libapache2-mod-wsgi-py3'
      - 'python3-pip'
      - 'python-psycopg2'
      - 'python-virtualenv'
      - 'hunspell-en-us'

- name: 'Create folder tree'
  file:
    path: '{{ service_base_path }}'
    state: 'directory'
    owner: 'list'
    group: 'www-data'
    mode: 0755

- name: 'Clone pgarchives repository'
  git:
    repo: '{{ repo_uri }}'
    dest: '{{ base_path }}/{{ repo_name }}'
    clone: true
    update: true
    version: 'a4b24b88cb343f778cac5ab66cc6117dac68bf21'
  register: repo

- name: 'Copy repository content to local folder'
  command:
    cmd: sh -c 'cp -r {{ base_path }}/{{ repo_name }}/* {{ service_base_path }}/'

- name: 'chown list:www-data pgarchives directory'
  file:
    path: '{{ service_base_path }}'
    owner: 'list'
    group: 'www-data'
    recurse: 'yes'

# Todo: fix issue: this fails silently on error
- name: 'Create role and database'
  command:
    cmd: psql -v ON_ERROR_STOP=0 --no-password
    stdin: |
      CREATE USER {{ database_user_pgarchives }} WITH PASSWORD '{{ database_password }}';
      CREATE DATABASE {{ database_name_pgarchives }};
  become: true
  become_user: 'postgres'
  register: result
  failed_when: 'result.rc != 0 and not "already exists" in result.stderr'

- include_role:
    name: 'http_vhost'
  vars:
    service_vhost_extra: true

- name: 'Activate mod_wsgi on apache2'
  command: '/usr/sbin/a2enmod wsgi'
  notify: 'reload httpd'

- name: 'Drop settings.py for django'
  template:
    src: 'settings.py.j2'
    dest: '{{ web_path }}/settings_local.py'
    owner: 'list'
    group: 'www-data'
    mode: '0660'

- name: 'Give correct permissions to /var/list for logging'
  file:
    path: '/var/list'
    owner: 'list'
    group: 'www-data'
    state: 'directory'

- name: 'install virtualenv via pip'
  pip:
    name: virtualenv
    executable: pip3
  become: true

- name: 'install required packages for django using pip'
  pip:
    name:
      - django==2.2.24
      - psycopg2-binary
      - requests
      - python-dateutil
      - pytidylib
    virtualenv: '{{ service_base_path }}/django'
    virtualenv_python: python3
  become: true

- include_role:
    name: cchurch.django
  vars:
    django_app_path: '{{ service_base_path }}/django'
    django_user: list
    django_virtualenv: '{{ service_base_path }}/django'

# To run this manually, simply run
# python manage.py createsuperuser
# into pgarchives's virtualenv.
- name: 'Create django superuser'
  command:
    cmd: 'sh -c "cd {{ service_base_path }} && {{ venv_python }} {{ service_base_path }}/django/manage.py shell"'
    stdin: |
      from django.contrib.auth import get_user_model
      User = get_user_model()
      if not User.objects.filter(username='admin').exists():
        user = User.objects.create_superuser('admin', '{{ django_superuser_address }}', '{{ django_superuser_pass }}')
        user.first_name = "Admin"
        user.last_name = "Admin"
        user.save()
  become: true
  become_user: 'list'

- name: 'Drop fixed schema.sql to avoid conflicts with django'
  copy:
    src: 'schema.sql'
    dest: '{{ service_base_path }}/loader/sql/schema.sql'
    owner: 'list'
    group: 'www-data'

- name: 'Execute loader/sql/schema.sql to complete the database'
  command:
    cmd: sh -c 'psql {{ database_name_pgarchives }} < {{ service_base_path }}/loader/sql/schema.sql'
  become: true
  become_user: 'list'

- name: 'Drop fixed pglister_sync.py'
  copy:
    src: 'pglister_sync.py'
    dest: '{{ service_base_path }}/loader/pglister_sync.py'
    owner: 'list'
    group: 'www-data'

- name: 'Drop archives.ini'
  template:
    src: 'archives.ini.j2'
    dest: '{{ service_base_path }}/loader/archives.ini'
    owner: 'list'
    group: 'www-data'
    mode: '0640'
