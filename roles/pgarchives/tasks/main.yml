---
- name: 'Install required packages'
  package:
    state: 'present'
    name:
      - 'python3'
      - 'git'
      - 'libapache2-mod-wsgi-py3'
      - 'python3-pip'
      - 'python3-psycopg2'
      - 'python3-virtualenv'
      - 'hunspell-en-us'
      - 'tidy'
  when: not redeploy

- name: 'Delete repository for redeployment'
  file:
    path: '{{ service_base_path }}/'
    state: absent
  when: redeploy

- name: 'Clone repository'
  include: clone_repository.yml

# Todo: fix issue: this fails silently on error
- name: 'Create role and database'
  command:
    cmd: psql -v ON_ERROR_STOP=0 --no-password
    stdin: |
      CREATE USER {{ database_user_pgarchives }} WITH PASSWORD '{{ database_password }}';
      CREATE DATABASE {{ database_name_pgarchives }};
  become: true
  become_user: 'postgres'
  register: result
  failed_when: 'result.rc != 0 and not "already exists" in result.stderr'
  when: not redeploy

- name: 'Grant permissions to database'
  community.postgresql.postgresql_query:
    query: '{{ item }}'
    db: '{{ database_name_pgarchives }}'
  loop:
    - 'GRANT ALL ON DATABASE {{ database_name_pgarchives }} TO "{{ database_user }}";'
    - 'GRANT CREATE ON SCHEMA public TO "{{ database_user }}";'
    - 'GRANT ALL ON ALL TABLES IN SCHEMA public TO "{{ database_user }}";'
    - 'GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO "{{ database_user }}";'
  become: true
  become_user: 'postgres'
  when: not redeploy

- name: 'Grant permissions to database to Debian-exim'
  community.postgresql.postgresql_query:
    query: '{{ item }}'
    db: '{{ database_name_pgarchives }}'
  loop:
    - 'GRANT ALL ON DATABASE {{ database_name_pgarchives }} TO "Debian-exim";'
    - 'GRANT ALL ON ALL TABLES IN SCHEMA public TO "Debian-exim";'
    - 'GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO "Debian-exim";'
  become: true
  become_user: 'postgres'
  when: not redeploy

- name: 'Restart postgresql to make new group perms effective'
  include_role:
    name: 'postgresql'
    tasks_from: 'restart.yml'
  when: not redeploy

- name: 'Include role http_vhost'
  include_role:
    name: 'http_vhost'
  vars:
    service_vhost_extra: true
    vhost_extra: '{{ vhost_extra_pgarchives }}'
  when: not redeploy

- name: 'Activate mod_wsgi on apache2'
  command: '/usr/sbin/a2enmod wsgi'
  notify: 'reload httpd'
  when: not redeploy

- name: 'Install required packages for django using pip'
  pip:
    name:
      - django==3.2.6
      - psycopg2-binary
      - requests
      - python-dateutil
      - pytidylib
      - pycryptodome # for private
      - pycryptodomex # for private
    virtualenv: '{{ service_base_path }}/django'
    virtualenv_python: python3
  become: true
  when: not redeploy

- name: 'Ensure the path to drop pg_dict exists'
  file:
    path: '/usr/share/postgresql/{{ postgresql_version }}/tsearch_data/'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '755'
  when: not redeploy

# These file is necessary to install schema
- name: 'Drop pg_dict.*'
  copy:
    src: '{{ item }}'
    dest: '/usr/share/postgresql/{{ postgresql_version }}/tsearch_data/'
    owner: 'root'
    group: 'root'
    mode: '644'
  loop:
    - 'pg_dict.stop'
    - 'pg_dict.syn' # this file comes from the pgweb repository
  when: not redeploy

# Todo: s/tsparser/other/

- name: 'Include django role'
  include_role:
    name: cchurch.django
  vars:
    django_app_path: '{{ service_base_path }}/django'
    django_user: list
    django_virtualenv: '{{ service_base_path }}/django'

# To run this manually, simply run
# python manage.py createsuperuser
# into pgarchives's virtualenv.
- name: 'Create django superuser'
  command:
    cmd: 'sh -c "cd {{ service_base_path }} && {{ venv_python }} {{ service_base_path }}/django/manage.py shell"'
    stdin: |
      from django.contrib.auth import get_user_model
      User = get_user_model()
      if not User.objects.filter(username='admin').exists():
        user = User.objects.create_superuser('admin', '{{ django_superuser_address }}', '{{ django_superuser_pass }}')
        user.first_name = "Admin"
        user.last_name = "Admin"
        user.save()
  become: true
  become_user: 'list'

- name: 'Run pglister_sync.py'
  command: '{{ venv_python }} {{ service_base_path }}/loader/pglister_sync.py'
  become: true
  become_user: 'list'
  when: not redeploy and not test_only

- name: 'Add crontab to run pglister_sync'
  cron:
    state: 'present'
    name: 'Add new lists and subscribers to pgarchives{% if pgarchives_private is defined %}-private{% endif %}'
    user: 'list'
    minute: '*/5'
    job: '{{ venv_python }} {{ service_base_path }}/loader/pglister_sync.py'
  when: not redeploy
