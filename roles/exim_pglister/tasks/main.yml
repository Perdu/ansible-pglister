---
- name: 'Update APT cache'
  apt:
    update_cache: true
  when: ansible_os_family == 'Debian'

- name: 'Install required packages'
  package:
    state: 'present'
    name:
      - '{{ exim_package }}'
      - 'python3-psycopg2'
      - 'cron'

- name: Copy exim configuration file
  template:
    src: 'update-exim4.conf.conf.j2'
    dest: '/etc/exim4/update-exim4.conf.conf'
    owner: 'root'
    group: 'root'
    mode: '644'

- name: Add .localmacros file for SMTPS
  template:
    src: 'exim4.conf.localmacros.j2'
    dest: '/etc/exim4/exim4.conf.localmacros'
    owner: root
    group: Debian-exim
    mode: '640'

- name: Generate exim4 config
  command:
    cmd: '/usr/sbin/update-exim4.conf -o {{ exim_configuration_file }}'
    creates: '{{ exim_configuration_file }}'
  become: true
  register: new_exim_config

- name: Set permissions of exim4.conf
  file:
    path: '{{ exim_configuration_file }}'
    mode: '640'
    owner: 'root'
    group: 'Debian-exim'

- name: Edit configuration with parts for pglister, pgarchives and pgarchives_private
  block:
    - name: Insert config for pglister (1/4)
      blockinfile:
        path: '{{ exim_configuration_file }}'
        insertafter: 'begin transports'
        block: |
          pglister_pipe:
            driver = pipe
            command = {{ base_path_pglister }}/local/web/pglister/bin/python {{ base_path_pglister }}/local/bin/inject.py -s $sender_address -d $local_part$local_part_suffix@$domain -m $header_message-id:
            #ignore_status
            temp_errors = *
            return_output = false
            freeze_exec_fail = true
            log_defer_output = true
            log_output = true
            headers_remove = List-Unsubscribe:List-Owner:List-Post:List-Subscribe:List-Help:List-Id:List-Archive
            #log_fail_output = true
            umask = 022
            environment =
            user = Debian-exim
            message_prefix =

    - name: Insert config for pglister (2/4)
      lineinfile:
        path: '{{ exim_configuration_file }}'
        regex: 'domainlist local_domains ='
        line: "domainlist local_domains = @ : ${lookup pgsql{select name from lists_domain where name='${quote_pgsql:$domain}'} {$value}} : MAIN_LOCAL_DOMAINS"

    - name: Insert config for pglister (3/4)
      lineinfile:
        path: '{{ exim_configuration_file }}'
        insertafter: 'hostlist relay_from_hosts ='
        line: 'hide pgsql_servers = localhost/{{ database_name_pglister }}/{{ database_user }}/{{ database_password }}'

    - name: Insert config for pglister (4/4)
      blockinfile:
        path: '{{ exim_configuration_file }}'
        insertbefore: 'begin transports'
        marker: '# {mark} ANSIBLE MANAGED BLOCK 2'
        block: |
          pglister:
            debug_print = "R: pglister for $local_part@$domain"
            driver = accept
            transport = pglister_pipe
            domains = +local_domains
            local_parts = mailer-daemon : ${lookup pgsql{select lists_list.name from lists_list, lists_domain WHERE lists_list.name='${quote_pgsql:$local_part}' and lists_domain.name='${quote_pgsql:$domain}' AND lists_list.domain_id=lists_domain.id} {$value}}

    - name: Insert config for pgarchives (1/2)
      blockinfile:
        path: '{{ exim_configuration_file }}'
        insertbefore: 'pglister:'  # this router must be placed before pglister's generic one
        marker: '# {mark} ANSIBLE MANAGED BLOCK 3'
        block: |
          archive_router:
            driver = accept
            domains = {{ service_vhost_name_pgarchives }}
            local_parts = ${lookup pgsql{select name from lists_list where name='${quote_pgsql:$local_part}' and subscription_policy <> 2} {$value}fail}
            transport = archive_pipe

    - name: Insert config for pgarchives (2/2)
      blockinfile:
        path: '{{ exim_configuration_file }}'
        insertafter: 'begin transports'
        marker: '# {mark} ANSIBLE MANAGED BLOCK 4'
        block: |
          archive_pipe:
            driver = pipe
            command = {{ base_path_pgarchives }}/local/django/bin/python {{ base_path_pgarchives }}/local/loader/load_message.py -l $local_part{% if exim_log_archive_pipe_output is defined and exim_log_archive_pipe_output %} -v 2>>/tmp/debug_exim_archive_pipe.txt >>/tmp/debug_exim_archive_pipe_stdout.txt{% endif %}

            #ignore_status
            temp_errors = *
            return_output = false
            freeze_exec_fail = true
            log_defer_output = true
            log_output = true
            #log_fail_output = true
            umask = 022
            user = Debian-exim
            environment =
            {% if exim_log_archive_pipe_output is defined and exim_log_archive_pipe_output %}use_shell = true{% endif %}

    - name: Insert config for pgarchives-private (1/2)
      blockinfile:
        path: '{{ exim_configuration_file }}'
        insertbefore: 'archive_router:'  # this router must be placed before pglister's generic one
        marker: '# {mark} ANSIBLE MANAGED BLOCK 5'
        block: |
          archive_private_router:
            driver = accept
            domains = {{ service_vhost_name_pgarchives }}
            local_parts = ${lookup pgsql{select name from lists_list where name='${quote_pgsql:$local_part}' and subscription_policy = 2} {$value}fail}
            transport = archive_private_pipe

    - name: Insert config for pgarchives-private (2/2)
      blockinfile:
        path: '{{ exim_configuration_file }}'
        insertbefore: 'archive_pipe:'
        marker: '# {mark} ANSIBLE MANAGED BLOCK 6'
        block: |
          archive_private_pipe:
            driver = pipe
            command = {{ base_path_pgarchives_private }}/local/django/bin/python {{ base_path_pgarchives_private }}/local/loader/load_message.py -l $local_part{% if exim_log_archive_pipe_output is defined and exim_log_archive_pipe_output %} 2>/tmp/debug_exim_archiveprivate_pipe.txt{% endif %}

            #ignore_status
            temp_errors = *
            return_output = false
            freeze_exec_fail = true
            log_defer_output = true
            log_output = true
            #log_fail_output = true
            umask = 022
            user = Debian-exim
            environment =
            {% if exim_log_archive_pipe_output is defined and exim_log_archive_pipe_output %}use_shell = true{% endif %}

- name: Add password for smarthost, if exists
  lineinfile:
    path: '/etc/exim4/passwd.client'
    line: '{{ smtp_relay_password }}'
  when: smtp_relay_password is defined and smtp_relay_password != ''

- name: Install spamassassin and fail2ban
  package:
    name:
      - spamassassin
      - fail2ban
    state: present
  when: use_spamassassin is defined and use_spamassassin

- name: Modify SpamAssassin service file to use sockets
  lineinfile:
    path: '/lib/systemd/system/{{ spamassassin_service }}'
    regexp: '^(ExecStart=.+?)( --socketpath=/var/run/spamd.socket)?$'
    line: '\1 --socketpath=/var/run/spamd.socket'
    backrefs: true
  when: use_spamassassin is defined and use_spamassassin

- name: Add spamassassin rule for exim-spam jail to ban spammers
  lineinfile:
    path: '/etc/fail2ban/filter.d/exim-spam.conf'
    line: '             ^%(pid)s \S+ %(host_info)sF=(<>|[^@]+@\S+) rejected after DATA: Your message scored \d+.\d+ SpamAssassin points. Report follows:\s*$'
    insertafter: 'This message contains a virus'
    firstmatch: true
  when: use_spamassassin is defined and use_spamassassin

- name: Reload systemd and start SpamAssassin service
  systemd:
    name: '{{ spamassassin_service }}'
    state: reloaded
    daemon_reload: true
    enabled: true
  when: use_spamassassin is defined and use_spamassassin

- name: Insert config for spamassassin (1/2)
  blockinfile:
    path: '{{ exim_configuration_file }}'
    insertbefore: 'begin acl'
    marker: '# {mark} ANSIBLE MANAGED BLOCK 7'
    block: |
      spamd_address = {{ exim_spamd_address }}
  when: use_spamassassin is defined and use_spamassassin

- name: Insert a marker before the end of acl_checks using multi-line pattern matching
  replace:
    path: '{{ exim_configuration_file }}'
    regexp: '(?s)(accept\s*begin routers)'
    replace: '# Marker for ansible\n\1'
  when: use_spamassassin is defined and use_spamassassin

- name: Insert config for spamassassin (2/2)
  blockinfile:
    path: '{{ exim_configuration_file }}'
    insertbefore: '# Marker for ansible'
    marker: '# {mark} ANSIBLE MANAGED BLOCK 8'
    block: '{{ lookup("template", "exim_spamassassin.j2") }}'
  when: use_spamassassin is defined and use_spamassassin

- name: Add cron emails destination for list
  community.general.cronvar:
    name: "MAILTO"
    value: "{{ cron_emails_destination }}"
  become: true
  become_user: 'list'

- name: Add mailname to /etc/mailname
  template:
    src: 'mailname.j2'
    dest: '/etc/mailname'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: mailname is defined

- name: Ensure SSL cert group exists
  action: group
  args:
    name: ssl-cert
    state: present

- name: Add Debian-exim user to ssl-cert group to be able to read cert files
  user:
    name: 'Debian-exim'
    groups: 'ssl-cert'
    append: true

- name: Restart exim.
  service:
    name: '{{ exim_daemon }}'
    state: 'restarted'
    enabled: true

- name: 'Ensure /var/list exists (for wsgi)'
  file:
    path: '/var/list'
    state: 'directory'
    owner: 'list'
    group: 'www-data'
    mode: '755'
