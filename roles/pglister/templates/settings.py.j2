# {{ ansible_managed }}

"""
Django settings for pglister project.

Generated by 'django-admin startproject' using Django 1.8.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Import the shared lib directory with non-django stuff
sys.path.append(os.path.abspath(os.path.join(BASE_DIR, '../')))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "{{ django_secret_key }}"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pglister.lists.apps.ListsAppConfig',
    'pglister.listlog',
    'django.contrib.admin',
]

AUTHENTICATION_BACKENDS = (
    'pglister.auth.AuthBackend',
)

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

ROOT_URLCONF = 'pglister.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ],
        },
    },
]

WSGI_APPLICATION = 'pglister.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ database_name }}',
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = False

USE_L10N = False

USE_TZ = False

DATETIME_FORMAT = "Y-m-d H:i:s"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/media/'

# Override in local settings
USE_PG_COMMUNITY_AUTH = True  # Right now we *always* do, but this is used to turn on/off some local features
PGAUTH_REDIRECT = "https://{{ service_vhost_name_pgweb }}/account/auth/13/"
PGAUTH_KEY = "{{ pgauth_key }}"
LOGIN_URL = "/accounts/login/"

CONFIRM_SENDER_ADDRESS = "{{ confirm_sender_address }}"
CONFIRM_SENDER_NAME = "Confirm Sender"

WEB_ROOT = "{{ external_url }}"
SYSTEM_NAME = "Testing List Server"

# Integrate with exim on the OS (queue cleanup etc)
EXIM_INTEGRATION = False

ARCHIVES_API_SERVERS = []


# For debug toolbar, can append more in local_settings
DEBUG_TOOLBAR = False
INTERNAL_IPS = [
    '127.0.0.1',
]

try:
    from .local_settings import *
except ImportError:
    pass

if EXIM_INTEGRATION:
    INSTALLED_APPS.append('pglister.eximintegration.apps.EximAppConfig')

if DEBUG and DEBUG_TOOLBAR:
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
    INSTALLED_APPS.append('debug_toolbar')

STATIC_ROOT = os.path.join(BASE_DIR, "../media/")
