---
- name: 'Include role prepare_django_app'
  include_role:
    name: prepare_django_app
  vars:
    database_name: '{{ database_name_pglister }}'
    vhost_extra: '{{ vhost_extra_pglister }}'

- name: 'Install required packages'
  package:
    state: 'present'
    name:
      - 'procmail' # to import mbox, not mandatory
  when: not redeploy

- name: 'Clone repository'
  import_tasks: clone_repository.yml

- name: 'Create a postgres user for Debian-exim'
  community.postgresql.postgresql_user:
    name: 'Debian-exim'
  become: true
  become_user: 'postgres'
  when: not redeploy

- name: 'Add password for list user in postgres, to allow login from exim'
  community.postgresql.postgresql_query:
    query: "ALTER USER list WITH password '{{ database_password }}';"
    db: '{{ database_name_pglister }}'
  become: true
  become_user: 'postgres'
  when: not redeploy

- name: 'Grant permissions to database to Debian-exim'
  community.postgresql.postgresql_query:
    query: '{{ item }}'
    db: '{{ database_name_pglister }}'
  loop:
    - 'GRANT ALL ON DATABASE {{ database_name_pglister }} TO "Debian-exim";'
    - 'GRANT ALL ON ALL TABLES IN SCHEMA public TO "Debian-exim";'
    - 'GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO "Debian-exim";'
  become: true
  become_user: 'postgres'
  when: not redeploy

- name: 'Create nagios role for postgres'
  community.postgresql.postgresql_user:
    name: nagios
  become: true
  become_user: 'postgres'
  register: result
  when: 'use_nagios and not redeploy'

- name: 'Grant permissions to database to nagios'
  community.postgresql.postgresql_query:
    query: '{{ item }}'
    db: '{{ database_name_pglister }}'
  loop:
    - 'GRANT CONNECT ON DATABASE {{ database_name_pglister }} TO "nagios";'
    - 'GRANT USAGE ON SCHEMA public TO "nagios";'
    - 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO "nagios";'
  become: true
  become_user: 'postgres'
  when: 'use_nagios and not redeploy'

- name: 'Install postgresql pgcrypto schema'
  community.postgresql.postgresql_schema:
    name: 'pgcrypto'
    database: '{{ database_name_pglister }}'
  become: true
  become_user: 'postgres'
  when: not redeploy

- name: 'Install postgresql crypto extension and grant usage'
  community.postgresql.postgresql_query:
    query: '{{ item }}'
    db: '{{ database_name_pglister }}'
  loop:
    - 'CREATE EXTENSION IF NOT EXISTS pgcrypto SCHEMA pgcrypto;'
    - 'GRANT USAGE ON SCHEMA pgcrypto TO {{ database_user }}'
  become: true
  become_user: 'postgres'
  when: not redeploy

- name: 'Run necessary operations to run eximintegration migrations'
  community.postgresql.postgresql_query:
    query: '{{ item }}'
    db: '{{ database_name_pglister }}'
  loop:
    - 'CREATE EXTENSION IF NOT EXISTS file_fdw;'
    - 'CREATE SERVER IF NOT EXISTS file_fdw FOREIGN DATA WRAPPER file_fdw;'
    - 'CREATE SCHEMA IF NOT EXISTS eximintegration;'
    - 'GRANT CREATE, USAGE ON SCHEMA eximintegration TO {{ database_user }};'
    - >
      CREATE FOREIGN TABLE IF NOT EXISTS eximintegration._raw_eximqueue(jdata jsonb NOT NULL)
      SERVER file_fdw OPTIONS (PROGRAM '{{ service_base_path }}/bin/exiqjson.py');
    - 'GRANT SELECT ON eximintegration._raw_eximqueue TO {{ database_user }};'
  become: true
  become_user: 'postgres'
  when: not redeploy

- name: 'Install required packages for django using pip'
  pip:
    name:
      - django==3.2.6
      - psycopg2-binary
      - requests
      - pycryptodome
      - pycryptodomex
      - crypto
    virtualenv: '{{ service_base_path }}/web/pglister/'
    virtualenv_python: python3
  become: true
  when: not redeploy

- name: 'Give exim permissions to list user (add list to Debian-exim group)'
  user:
    name: '{{ database_user }}'
    groups: 'Debian-exim'
    append: true
  when: not redeploy

- name: 'Give exim permissions to postgres user (add postgres to Debian-exim group)'
  user:
    name: 'postgres'
    groups: 'Debian-exim'
    append: true
  when: not redeploy

- name: 'Restart postgresql to make new group perms effective'
  include_role:
    name: 'postgresql'
    tasks_from: 'restart.yml'
  when: not redeploy

- name: 'Include Django role'
  include_role:
    name: cchurch.django
  vars:
    django_app_path: '{{ service_base_path }}/web'
    django_user: list
    django_virtualenv: '{{ service_base_path }}/web/pglister'

# To run this manually, simply run
# python manage.py createsuperuser
# into pglister's virtualenv.
- name: 'Create django superuser'
  command:
    cmd: '{{ venv_python }} {{ service_base_path }}/web/manage.py shell'
    stdin: |
      from django.contrib.auth import get_user_model
      User = get_user_model()
      if not User.objects.filter(username='admin').exists():
        user = User.objects.create_superuser('admin', '{{ django_superuser_address }}', '{{ django_superuser_pass }}')
        user.first_name = "Admin"
        user.last_name = "Admin"
        user.save()
        print("changed")
  register: res
  changed_when: res.stdout == "changed"
  become: true
  become_user: 'list'

# To do this manually, add a domain in /admin/
- name: 'Create domain in pglister'
  command:
    chdir: '{{ service_base_path }}'
    cmd: '{{ venv_python }} {{ service_base_path }}/web/manage.py shell'
    stdin: |
      from pglister.lists.models import *
      if len(Domain.objects.filter(name="{{ service_vhost_name }}")) == 0:
        dom = Domain()
        dom.name = "{{ service_vhost_name }}"
        dom.lists_helppage = "{{ service_vhost_name }}"
        dom.save()
        print("changed")
  register: res
  changed_when: res.stdout == "changed"
  become: true
  become_user: 'list'
  when: not redeploy

# To do this manually, add an archive server in /admin/
- name: 'Create archives server in pglister'
  command:
    chdir: '{{ service_base_path }}'
    cmd: '{{ venv_python }} {{ service_base_path }}/web/manage.py shell'
    stdin: |
      from pglister.lists.models import *
      if len(ArchiveServer.objects.filter(name="pgarchives")) == 0:
        arch = ArchiveServer()
        arch.name = "pgarchives"
        arch.urlpattern = "https://{{ service_vhost_name_pgarchives }}/list/%"
        arch.mailurlpattern = "https://{{ service_vhost_name_pgarchives }}/message-id/%"
        arch.maildomain = "{{ service_vhost_name_pgarchives }}"
        arch.apikey = "{{ pgarchives_secret_key }}"
        arch.save()
        print("changed")
  register: res
  changed_when: res.stdout == "changed"
  become: true
  become_user: 'list'
  when: not redeploy

- name: 'Create archives-private server in pglister'
  command:
    chdir: '{{ service_base_path }}'
    cmd: '{{ venv_python }} {{ service_base_path }}/web/manage.py shell'
    stdin: |
      from pglister.lists.models import *
      if len(ArchiveServer.objects.filter(name="pgarchivesprivate")) == 0:
        arch = ArchiveServer()
        arch.name = "pgarchivesprivate"
        arch.urlpattern = "https://{{ service_vhost_name_pgarchives_private }}/list/%"
        arch.mailurlpattern = "https://{{ service_vhost_name_pgarchives_private }}/message-id/%"
        arch.maildomain = "{{ service_vhost_name_pgarchives }}"
        arch.apikey = "{{ pgarchives_secret_key }}"
        arch.save()
        print("changed")
  register: res
  changed_when: res.stdout == "changed"
  become: true
  become_user: 'list'
  when: not redeploy

- name: 'Check if systemctl is available'
  command: 'which systemctl'
  register: 'systemctl_available'
  ignore_errors: true

- name: 'Install systemd services'
  command:
    cmd: './install.sh -install'
    chdir: '{{ service_base_path }}/systemd/'
  become: true
  when: 'not redeploy and systemctl_available.rc == 0'

- name: 'Start systemd services'
  command:
    cmd: './install.sh -start'
    chdir: '{{ service_base_path }}/systemd/'
  become: true
  when: 'not redeploy and systemctl_available.rc == 0'

- name: 'Enable systemd services'
  command:
    cmd: './install.sh -enable'
    chdir: '{{ service_base_path }}/systemd/'
  become: true
  when: 'not redeploy and systemctl_available.rc == 0'

- name: 'Add pglister commands to nagios'
  when: use_nagios and not redeploy
  block:
    - name: 'Add pglister commands to nrpe config'
      lineinfile:
        line: '{{ item }}'
        path: '/etc/nagios/nrpe_ansible.cfg'
        state: 'present'
      loop:
        - 'command[pglister_log]={{ venv_python }} {{ service_base_path }}/nagios/pglister_log.py'
        - 'command[pglister_processes]={{ venv_python }} {{ service_base_path }}/nagios/pglister_processes.py'
        - 'command[pglister_queues]={{ venv_python }} {{ service_base_path }}/nagios/pglister_queues.py'

    - name: 'Restart nagios-nrpe-server'
      service:
        name: 'nagios-nrpe-server.service'
        state: 'restarted'
