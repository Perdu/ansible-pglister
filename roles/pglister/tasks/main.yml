---
- name: 'Install required packages'
  package:
    state: 'latest'
    name:
      - 'python3'
      - 'libapache2-mod-wsgi-py3'
      - 'python3-pip'
      - 'python-psycopg2'
      - 'python-virtualenv'
      - 'postgresql-contrib'

- name: 'Create folder tree'
  file:
    path: '{{ service_base_path }}'
    state: 'directory'
    owner: 'list'
    group: 'www-data'
    mode: 0755

- name: 'Clone pglister repository'
  git:
    repo: '{{ repo_uri }}'
    dest: '{{ base_path }}/{{ repo_name }}'
    clone: true
    update: true
    version: '{{ pglister_version }}'
  register: repo

- name: 'Copy repository content to local folder'
  command:
    cmd: sh -c 'cp -r {{ base_path }}/{{ repo_name }}/* {{ service_base_path }}/'

- name: 'chown list:www-data pglister directory'
  file:
    path: '{{ service_base_path }}'
    owner: 'list'
    group: 'www-data'
    recurse: 'yes'

# Todo: fix issue: this fails silently on error
- name: 'Create role and database'
  command:
    cmd: psql -v ON_ERROR_STOP=0 --no-password
    stdin: |
      CREATE USER {{ database_user }};
      CREATE DATABASE {{ database_name_pglister }};
  become: true
  become_user: 'postgres'
  register: result
  failed_when: 'result.rc != 0 and not "already exists" in result.stderr'

- name: 'Create a postgres user for Debian-exim'
  postgresql_user:
    name: 'Debian-exim'
  become: true
  become_user: 'postgres'

- name: 'Grant permissions to database to Debian-exim'
  postgresql_query:
    query: '{{ item }}'
    db: '{{ database_name_pglister }}'
  loop:
    - 'GRANT ALL ON DATABASE {{ database_name_pglister }} TO "Debian-exim";'
    - 'GRANT ALL ON ALL TABLES IN SCHEMA public TO "Debian-exim";'
    - 'GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO "Debian-exim";'
  become: true
  become_user: 'postgres'

- name: 'Install postgresql pgcrypto schema'
  postgresql_schema:
    name: 'pgcrypto'
    database: '{{ database_name_pglister }}'
  become: true
  become_user: 'postgres'

- name: 'Install postgresql crypto extension and grant usage'
  postgresql_query:
    query: '{{ item }}'
    db: '{{ database_name_pglister }}'
  loop:
    - 'CREATE EXTENSION IF NOT EXISTS pgcrypto SCHEMA pgcrypto;'
    - 'GRANT USAGE ON SCHEMA pgcrypto TO {{ database_user }}'
  become: true
  become_user: 'postgres'

- name: 'Run necessary operations to run eximintegration migrations'
  postgresql_query:
    query: '{{ item }}'
    db: '{{ database_name_pglister }}'
  loop:
    - 'CREATE EXTENSION IF NOT EXISTS file_fdw;'
    - 'CREATE SERVER IF NOT EXISTS file_fdw FOREIGN DATA WRAPPER file_fdw;'
    - 'CREATE SCHEMA IF NOT EXISTS eximintegration;'
    - 'GRANT CREATE, USAGE ON SCHEMA eximintegration TO {{ database_user }};'
    - "CREATE FOREIGN TABLE IF NOT EXISTS eximintegration._raw_eximqueue(jdata jsonb NOT NULL) SERVER file_fdw OPTIONS (PROGRAM '{{ service_base_path }}/bin/exiqjson.py');"
    - 'GRANT SELECT ON eximintegration._raw_eximqueue TO {{ database_user }};'
  become: true
  become_user: 'postgres'

- name: 'Copy pglister config'
  template:
    src: 'pglister.ini.j2'
    dest: '{{ service_base_path }}/pglister.ini'
    owner: 'list'
    group: 'www-data'
    mode: '0664'

- include_role:
    name: 'http_vhost'
  vars:
    service_vhost_extra: true

- name: 'Activate mod_wsgi on apache2'
  command: '/usr/sbin/a2enmod wsgi'
  notify: 'reload httpd'

- name: 'Drop settings.py for django'
  template:
    src: 'settings.py.j2'
    dest: '{{ service_base_path }}/web/pglister/settings.py'
    owner: 'list'
    group: 'www-data'
    mode: '0640'

- name: 'Give correct permissions to /var/list for logging'
  file:
    path: '/var/list'
    owner: 'list'
    group: 'www-data'
    state: 'directory'

- name: 'install virtualenv via pip'
  pip:
    name: virtualenv
    executable: pip3
  become: true

- name: 'install required packages for django using pip'
  pip:
    name:
      - django==2.2.24
      - psycopg2-binary
      - requests
      - pycryptodome
      - pycryptodomex
      - crypto
    virtualenv: '{{ service_base_path }}/web/pglister/'
    virtualenv_python: python3
  become: true

- name: 'Give exim permissions to list user (add list to Debian-exim group)'
  user:
    name: '{{ database_user }}'
    groups: 'Debian-exim'
    append: 'yes'

- name: 'Give exim permissions to postgres user (add postgres to Debian-exim group)'
  user:
    name: 'postgres'
    groups: 'Debian-exim'
    append: 'yes'

- name: 'Restart postgres to make new group perms effective'
  service:
    name: 'postgresql@12-main'
    state: 'restarted'

- include_role:
    name: cchurch.django
  vars:
    django_app_path: '{{ service_base_path }}/web'
    django_user: list
    django_virtualenv: '{{ service_base_path }}/web/pglister'

# To run this manually, simply run
# python manage.py createsuperuser
# into pglister's virtualenv.
- name: 'Create django superuser'
  command:
    cmd: '{{ venv_python }} {{ service_base_path }}/web/manage.py shell'
    stdin: |
      from django.contrib.auth import get_user_model
      User = get_user_model()
      User.objects.filter(username='admin').exists() or \
      User.objects.create_superuser('admin', '{{ django_superuser_address }}', '{{ django_superuser_pass }}')
  become: true
  become_user: 'list'

# To do this manually, add a domain in /admin/
- name: 'Create domain in pglister'
  command:
    cmd: 'sh -c "cd {{ service_base_path }} && {{ venv_python }} {{ service_base_path }}/web/manage.py shell"'
    stdin: |
      from pglister.lists.models import *
      if len(Domain.objects.filter(name="{{ service_vhost_name }}")) == 0:
        dom = Domain()
        dom.name = "{{ service_vhost_name }}"
        dom.lists_helppage = "{{ service_vhost_name }}"
        dom.save()
  become: true
  become_user: 'list'

- name: 'Add link to venv to systemd services'
  lineinfile:
    path: '{{ service_base_path }}/systemd/pglister_{{ item }}.template'
    regexp: '^ExecStart=_ROOT_'
    line: 'ExecStart={{ venv_python }} _ROOT_/bin/{{ item }}.py'
  loop:
    - 'bounceprocessor'
    - 'cleanup'
    - 'eximcleaner'
    - 'mailprocessor'
    - 'mailsender'
    - 'moderationprocessor'

- name: 'Install systemd services'
  command:
    cmd: './install.sh -install'
    chdir: '{{ service_base_path }}/systemd/'
  become: true

- name: 'Start systemd services'
  command:
    cmd: './install.sh -start'
    chdir: '{{ service_base_path }}/systemd/'
  become: true

- name: 'Enable systemd services'
  command:
    cmd: './install.sh -enable'
    chdir: '{{ service_base_path }}/systemd/'
  become: true
