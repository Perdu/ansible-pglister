---
- name: Ensure exim is installed.
  package:
    name: '{{ exim_package }}'
    state: 'present'

- name: Copy exim configuration file
  template:
    src: 'update-exim4.conf.conf.j2'
    dest: '/etc/exim4/update-exim4.conf.conf'
    owner: 'root'
    group: 'root'
    mode: '644'

- name: generate exim4 config
  command:
    cmd: '/usr/sbin/update-exim4.conf -o /etc/exim4/exim4.conf'
  become: true

- name: Set permissions of exim4.conf
  file:
    path: '/etc/exim4/exim4.conf'
    mode: '640'
    owner: 'root'
    group: 'Debian-exim'

- name: add password for smarthost, if exists
  lineinfile:
    path: '/etc/exim4/passwd.client'
    line: '{{ smtp_relay_password }}'
  when: smtp_relay_password is defined

- name: Insert config for pglister (1/4)
  blockinfile:
    path: '{{ exim_configuration_file }}'
    insertafter: 'begin transports'
    block: |
      pglister_pipe:
        driver = pipe
        command = {{ base_path_pglister }}/local/web/pglister/bin/python {{ base_path_pglister }}/local/bin/inject.py -s $sender_address -d $local_part$local_part_suffix@$domain -m $header_message-id:
        #ignore_status
        temp_errors = *
        return_output = false
        freeze_exec_fail = true
        log_defer_output = true
        log_output = true
        headers_remove = List-Unsubscribe:List-Owner:List-Post:List-Subscribe:List-Help:List-Id:List-Archive
        #log_fail_output = true
        umask = 022
        environment =
        user = Debian-exim
        message_prefix =

- name: Insert config for pglister (2/4)
  lineinfile:
    path: '{{ exim_configuration_file }}'
    regex: 'domainlist local_domains ='
    line: "domainlist local_domains = @ : ${lookup pgsql{select name from lists_domain where name='${quote_pgsql:$domain}'} {$value}} : MAIN_LOCAL_DOMAINS"

- name: Insert config for pglister (3/4)
  lineinfile:
    path: '{{ exim_configuration_file }}'
    insertafter: 'hostlist relay_from_hosts ='
    line: 'hide pgsql_servers = localhost/{{ database_name_pglister }}/{{ database_user }}/{{ database_password }}'

- name: Insert config for pglister (4/4)
  blockinfile:
    path: '{{ exim_configuration_file }}'
    insertbefore: 'begin transports'
    marker: '# {mark} ANSIBLE MANAGED BLOCK 2'
    block: |
      pglister:
        debug_print = "R: pglister for $local_part@$domain"
        driver = accept
        transport = pglister_pipe
        domains = +local_domains
        local_parts = mailer-daemon : ${lookup pgsql{select lists_list.name from lists_list, lists_domain WHERE lists_list.name='${quote_pgsql:$local_part}' and lists_domain.name='${quote_pgsql:$domain}' AND lists_list.domain_id=lists_domain.id} {$value}}

- name: Insert config for pgarchives (1/2)
  blockinfile:
    path: '{{ exim_configuration_file }}'
    insertbefore: 'pglister:' # this router must be placed before pglister's generic one
    marker: '# {mark} ANSIBLE MANAGED BLOCK 3'
    block: |
      archive_router:
        driver = accept
        domains = {{ service_vhost_name_pgarchives }}
        local_parts = ${lookup pgsql{select name from lists_list where name='${quote_pgsql:$local_part}'} {$value}fail}
        transport = archive_pipe

- name: Insert config for pgarchives (2/2)
  blockinfile:
    path: '{{ exim_configuration_file }}'
    insertafter: 'begin transports'
    marker: '# {mark} ANSIBLE MANAGED BLOCK 4'
    block: |
      archive_pipe:
        driver = pipe
        command = {{ base_path_pgarchives }}/local/django/bin/python {{ base_path_pgarchives }}/local/loader/load_message.py -l $local_part
        #ignore_status
        temp_errors = *
        return_output = false
        freeze_exec_fail = true
        log_defer_output = true
        log_output = true
        #log_fail_output = true
        umask = 022
        user = Debian-exim
        environment =

- name: Add cron emails destination for list
  cronvar:
    name: "MAILTO"
    value: "{{ cron_emails_destination }}"
  become: true
  become_user: 'list'

- name: Add mailname to /etc/mailname
  template:
    src: 'mailname.j2'
    dest: '/etc/mailname'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: mailname is defined

- name: Restart exim.
  service:
    name: '{{ exim_daemon }}'
    state: 'restarted'
    enabled: 'yes'
